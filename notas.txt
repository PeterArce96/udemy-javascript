VARIABLE
Es un contenedor de información que apunta a un lugar en memoria.
Dicha información puede cambiar en el futuro

POLYFILL
Código que provee el funcionamiento de una nueva característica de JS (Ecmascript 6), en versiones viejas como ES5

BREAKPOINT
Seleccionar la línea donde se quiere empezar el breakpoint activando el punto rojo al lado del número de la línea.
Luego ir al menú de visual studio, luego "ejecutar" y luego "iniciar depuración", aquí se debe seleccionar node.js en "abrir configuraciones"


window.outerWidth
Brinda el valor del ancho de la pantalla del documento

window.outerHeight
Brinda el valor del alto de la pantalla del documento

TIPOS DE DATO DE UNA VARIABLE
JS ES UN LENGUAJE DÉBILMENTE TIPADO, NO LE DECIMOS A JS QUE ESTA VARIABLE VA TENER STRING, NUMBER. EL LENGUAJE LO INFIERE.

TIPOS DE DATOS DE JS
PRIMITIVOS
OBJETOS

PRIMITIVOS
Es una información que no es un objeto y son inmutables.

-Boolean --> true / false
-Null --> Sin valor en lo absoluto
-Undefined --> Una variable declarada que aún no se le asigna un valor
-Number --> integers, floats, etc
-String --> Cadena de caracteres, Ej: Palabras, nombres de personas
-Symbol --> Es un valor úniuco que no es igual a ningún otro valor

PALABRAS RESERVADAS
Son palabras que tienen un uso específico, solo se deben de usar para lo que fueron creadas.

ARREGLOS []
Son un objeto muy parecido a una lista de información, que contienen un grupo de elementos
Usualmente, esa información dentro del arreglo es del mismo tipo de dato.
Empiezan en la posición 0

FUNCIONES
Centralizar la lógica de un procedimiento que se puede reutilizar varias veces.
Si las funciones no tienen el "return" explícito, no retorna nada, retorna un Undefined

MÉTODO
Función que se encuentra dentro de un objeto

CDN
Content Delivery Network
un host de contenido que habilita la forma de usar la librería de manera externa, en línea.

DOM
Document Object Model
Conjunto de objetos anidados para crear un documento HTML o tambien al xml, La idea es tener acceso dinámico a su través de programación a sus elementos y poder manipularlos.

"document" en consola
Hace referencia a toda la página HTML

document.querySelector()
Recupera el primer elemento que cumple con la condición que especificamos.

document.querySelectorAll()
Regresa todos los elementos que cumplen con la condición

document.querySelector('small').innerText()
innerText()
Permite poner o cambiar el texto directamente en el elemento

document.querySelector('small').innerHTML='<b>Hola Mundo </b>'
innerHTML
Permite cambiar el elemento HTML seleccionado.

Formas de obtener un elemento por el DOM en JS
document.querySelector('#computadora-cartas');
Permite seleccionar el elemento con ese ID, se tiene que poner el simbolo que representa al ID '#'

document.getElementById('computadora-cartas');
Selecciona el elemento directamente por su ID

Para llamar un elemento por su CLASE

1.-RECOMENDABLE
document.querySelectorAll('.carta');
Llama a todos los elementos con esa clase 'carta'. Se le pone el simbolo de clase '.'. Devuelve un NodeList

2.-
document.queryElementsByClassName('carta');
Llama a todos los elementos con esa clase 'carta'. No se colocar el '.'. Devuelve un HTMLCollection

RECOMENDACIÓN
Es mejor crear una variable para cada llamado de un elemento en el DOM, porque si no JS va tener que barrer el HTML cada vez que lo llamemos.

const titulo = document.querySelector('.titulo');

titulo.innerText = 'Hola Mundo';

CREAR UN ELEMENTO HTML EN EL DOM
document.createElement('button');
Pide un elemento html, en este caso un botón.

Ejemplo:
CREAMOS la variable divBotones
const divBotones = querySelector('#divBotones');

CREAMOS un nuevo elemento HTML, en este caso botón nuevo para agregarlo al div que contiene los demás botones.
const botonNuevo = document.createElement('button');

Y lo AGREGAMOS al div con 'append()'
divBotones.append(botonNuevo);

luego le MODIFICAMOS el texto
botonNuevo.innerText = 'Destruir el mundo';

Le agregamos CLASES al boton con 'classList.add()'
botonNuevo.classList.add('btn');
botonNuevo.classList.add('btn-success');

--------------------
tambien cuando creamos un nuevo elemento podemos utilizar todas sus propiedades, por ejemplo creamos un input
const input = document.createElement('input');

lo agregamos al final del body
document.body.append(input);

le agregamos una clase del bootstrap
input.classList.add('form-control');

Podemos utilizar su propiedad "placeholder"
input.placeholder = 'Hola Mundo'.
